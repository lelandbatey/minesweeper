#!/usr/bin/env python3

from pprint import pprint, pformat
from collections import deque
import argparse
import sys

from msweep import minefield, colors
import msweep

DEBUG = False

CURRENT = ""
PRIOR = ""

def maxlinelen(strng):
    # We have to remove colors or else they're counted in the line length
    return max([len(colors.remove_color(l)) for l in strng.split('\n')])

def draw(board, first_draw=False):
    global CURRENT
    global PRIOR
    CURRENT = str(board) + "\n" + CURRENT  # + "\n"
    to_draw = CURRENT

    if not first_draw:
        max_width = max([maxlinelen(CURRENT), maxlinelen(PRIOR)])
        fmt = "{{:<{}}}".format(max_width)
        up_count = PRIOR.count('\n')
        to_draw = "\n".join([fmt.format(line) for line in CURRENT.split('\n')])
        to_draw = ("\r\x1b[1A" * up_count) + to_draw

    print(to_draw, end="")
    PRIOR = CURRENT
    CURRENT = ""


def pbuf(instr, end="\n"):
    global CURRENT
    CURRENT += instr + end



def move_select(direction, field):
    selected = field.selected()
    c = selected[0]
    startloc = [c.x, c.y]
    delta = [0, 0]
    if direction == msweep.inpt.KEY_UP:
        delta = [0, -1]
    elif direction == msweep.inpt.KEY_DOWN:
        delta = [0, 1]
    elif direction == msweep.inpt.KEY_RIGHT:
        delta = [1, 0]
    elif direction == msweep.inpt.KEY_LEFT:
        delta = [-1, 0]

    # Filter out-of-bounds deltas
    newloc = [startloc[0] + delta[0], startloc[1] + delta[1]]
    if newloc[0] < 0 or newloc[0] >= field.width:
        newloc[0] = startloc[0]
    if newloc[1] < 0 or newloc[1] >= field.height:
        newloc[1] = startloc[1]

    next_c = field.board[newloc[0]][newloc[1]]
    c.selected = False
    next_c.selected = True


def lose_game(field):
    for h in range(field.height):
        for w in range(field.width):
            c = field.board[w][h]
            if c.contents == minefield.Contents.bomb:
                c.transparent = True
    draw(field, False)
    pbuf("Found bomb, you lose!")
    draw(field, False)
    print()
    sys.exit(0)


def win_game(field):
    for h in range(field.height):
        for w in range(field.width):
            c = field.board[w][h]
            if c.contents == minefield.Contents.bomb:
                c.probed = True
                c.contents = minefield.Contents.smile
    draw(field, False)
    pbuf("You win!")
    draw(field, False)
    sys.exit(0)


def probe(mfield):
    """
    Probes the minefields currently selected cell.
    If the current cell is flagged, silently ignores the probe.
    If the current cell has a bomb in it, the user loses the game.
    If the current cell does not have a bomb in it, but the current cell is
    adjacent to a cell that does have a bomb in it, then the number of bombs
    the current cell is adjacent to is revealed on the board.
    If the current cell contains no bombs and is not adjacent to any bombs,
    then all adjacent cells are recursively probed.
    """
    q = deque(mfield.selected())
    while True:
        if not len(q):
            break
        cell = q.popleft()
        if cell.flaged:
            continue
        if not cell.probed:
            cell.probed = True
            if cell.contents == minefield.Contents.bomb:
                lose_game(mfield)
            if cell.bomb_contacts == 0:
                adjacent = cell.get_adjacent()
                for adj in adjacent:
                    q.append(adj)


def flag(mfield):
    """
    Flags a particular square.
    """
    for cell in mfield.selected():
        if cell.flaged:
            cell.flaged = False
        else:
            cell.flaged = True


def check_win(mfield):
    correct_flags = 0
    for h in range(mfield.height):
        for w in range(mfield.width):
            c = mfield.board[w][h]
            if c.contents == minefield.Contents.bomb and c.flaged:
                correct_flags += 1
    if correct_flags == mfield.bomb_count:
        win_game(mfield)


def open_corridors(mfield):
    selected = mfield.selected()
    original = selected[0]
    for h in range(mfield.height):
        for w in range(mfield.width):
            c = mfield.board[w][h]
            if c.bomb_contacts == 0:
                original.selected = False
                c.selected = True
                probe(mfield)
                c.selected = False
                original.selected = True

def main():
    """
    Initialization of game and main event loop.
    """
    global DEBUG
    parser = argparse.ArgumentParser(
        description="Play a game of minesweeper. Use arrows to move, 'enter' or 'space' to probe, 'f' to flag, CTRL-C to exit."
    )
    parser.add_argument(
        '--height',
        type=int,
        default=16,
        help="the height of the board (default=16)")
    parser.add_argument(
        '--width',
        type=int,
        default=16,
        help="the height of the board (default=16)")
    parser.add_argument(
        '--mines', type=int, default=None, help="number of mines on the board")
    parser.add_argument('--debug', dest='debug', action='store_true')
    parser.set_defaults(debug=False)
    args = parser.parse_args()
    DEBUG = args.debug

    board = minefield.MineField(
        height=args.height, width=args.width, bomb_count=args.mines)
    draw(board, first_draw=True)
    inpt_reader = msweep.inpt.new_time_filter(msweep.inpt.new_readinput())
    while True:
        key = inpt_reader.get()
        if DEBUG:
            pbuf("bytes: {}, time: {}".format(key['bytes'], key['time']))
        if key['bytes'] == [chr(3)]:
            pbuf('Recieved CTRL-C, exiting!')
            break
        keyid = msweep.inpt.keymap(key['bytes'])
        if keyid:
            if keyid in msweep.inpt.ARROW_KEYS:
                move_select(keyid, board)
            if keyid in msweep.inpt.PROBE_KEYS:
                if board.brandnew:
                    board.create_foothold()
                    board.brandnew = False
                probe(board)
        elif key['bytes'] == ['f']:
            flag(board)
        elif key['bytes'] == ['o']:
            if DEBUG:
                open_corridors(board)
        check_win(board)
        draw(board, False)
    draw(board, False)


if __name__ == '__main__':
    main()
